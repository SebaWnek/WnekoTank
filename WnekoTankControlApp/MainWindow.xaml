<Window x:Class="WnekoTankControlApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WnekoTankControlApp"
        mc:Ignorable="d"
        Title="MainWindow" Height="1080" Width="1920"
        WindowState="Maximized"
        Loaded="Window_Loaded"
        Closing="Window_Closing">
    <Window.Resources>
        <!--Control colors.-->
        <Color x:Key="WindowColor">#FFE8EDF9</Color>
        <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
        <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

        <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
        <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
        <Color x:Key="DisabledForegroundColor">#FF888888</Color>

        <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
        <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

        <Color x:Key="ControlLightColor">White</Color>
        <Color x:Key="ControlMediumColor">#FF7381F9</Color>
        <Color x:Key="ControlDarkColor">#FF211AA9</Color>

        <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
        <Color x:Key="ControlPressedColor">#FF211AA9</Color>


        <Color x:Key="GlyphColor">#FF444444</Color>
        <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

        <!--Border colors-->
        <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
        <Color x:Key="BorderMediumColor">#FF888888</Color>
        <Color x:Key="BorderDarkColor">#FF444444</Color>

        <Color x:Key="PressedBorderLightColor">#FF888888</Color>
        <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

        <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
        <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

        <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

        <!--Control-specific resources.-->
        <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
        <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
        <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

        <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

        <LinearGradientBrush x:Key="MenuPopupBrush"
                     EndPoint="0.5,1"
                     StartPoint="0.5,0">
            <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="0" />
            <GradientStop Color="{DynamicResource ControlMediumColor}"
                Offset="0.5" />
            <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="1" />
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                     StartPoint="0,0"
                     EndPoint="1,0">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#000000FF"
                    Offset="0" />
                    <GradientStop Color="#600000FF"
                    Offset="0.4" />
                    <GradientStop Color="#600000FF"
                    Offset="0.6" />
                    <GradientStop Color="#000000FF"
                    Offset="1" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <Style x:Key="SliderButtonStyle"
       TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels"
          Value="true" />
            <Setter Property="OverridesDefaultStyle"
          Value="true" />
            <Setter Property="IsTabStop"
          Value="false" />
            <Setter Property="Focusable"
          Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SliderThumbStyleVertical"
       TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels"
          Value="true" />
            <Setter Property="OverridesDefaultStyle"
          Value="true" />
            <Setter Property="Height"
          Value="100" />
            <Setter Property="Width"
          Value="100" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Ellipse x:Name="Ellipse"
                 StrokeThickness="1">
                            <Ellipse.Stroke>
                                <LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{DynamicResource BorderLightColor}"
                                Offset="0.0" />
                                            <GradientStop Color="{DynamicResource BorderDarkColor}"
                                Offset="1.0" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Ellipse.Stroke>
                            <Ellipse.Fill>
                                <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
                                    <GradientStop Color="{DynamicResource ControlMediumColor}"
                            Offset="1" />
                                    <GradientStop Color="{DynamicResource ControlLightColor}" />
                                </LinearGradientBrush>
                            </Ellipse.Fill>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Ellipse">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlMouseOverColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Ellipse">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlPressedColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Ellipse">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledControlDarkColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Ellipse>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SliderThumbStyleHorizontal"
       TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels"
          Value="true" />
            <Setter Property="OverridesDefaultStyle"
          Value="true" />
            <Setter Property="Height"
          Value="30" />
            <Setter Property="Width"
          Value="30" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Ellipse x:Name="Ellipse"
                 StrokeThickness="1">
                            <Ellipse.Stroke>
                                <LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{DynamicResource BorderLightColor}"
                                Offset="0.0" />
                                            <GradientStop Color="{DynamicResource BorderDarkColor}"
                                Offset="1.0" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Ellipse.Stroke>
                            <Ellipse.Fill>
                                <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
                                    <GradientStop Color="{DynamicResource ControlMediumColor}"
                            Offset="1" />
                                    <GradientStop Color="{DynamicResource ControlLightColor}" />
                                </LinearGradientBrush>
                            </Ellipse.Fill>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Ellipse">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlMouseOverColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Ellipse">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlPressedColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).
                    (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Ellipse">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledControlDarkColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Ellipse>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Template when the orientation of the Slider is Horizontal.-->
        <ControlTemplate x:Key="HorizontalSlider"
                 TargetType="{x:Type Slider}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto"
                     MinHeight="{TemplateBinding MinHeight}" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick"
             SnapsToDevicePixels="True"
             Placement="Top"
             Height="4"
             Visibility="Collapsed">
                    <TickBar.Fill>
                        <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                    </TickBar.Fill>
                </TickBar>
                <Border x:Name="TrackBackground"
            Margin="0"
            CornerRadius="2"
            Height="10"
            Grid.Row="1"
            BorderThickness="1">
                    <Border.BorderBrush>
                        <LinearGradientBrush StartPoint="0,0"
                             EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="{DynamicResource BorderLightColor}"
                            Offset="0.0" />
                                    <GradientStop Color="{DynamicResource BorderDarkColor}"
                            Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Border.BorderBrush>
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0"
                             EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="{DynamicResource ControlLightColor}"
                            Offset="0.0" />
                                    <GradientStop Color="{DynamicResource SliderTrackDarkColor}"
                            Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Border.Background>
                </Border>
                <Track Grid.Row="1"
           x:Name="PART_Track">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}"
                      Command="Slider.DecreaseLarge" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource SliderThumbStyleHorizontal}" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}"
                      Command="Slider.IncreaseLarge" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <TickBar x:Name="BottomTick"
             SnapsToDevicePixels="True"
             Grid.Row="2"
             Fill="{TemplateBinding Foreground}"
             Placement="Bottom"
             Height="4"
             Visibility="Collapsed" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="TickPlacement"
             Value="TopLeft">
                    <Setter TargetName="TopTick"
              Property="Visibility"
              Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement"
             Value="BottomRight">
                    <Setter TargetName="BottomTick"
              Property="Visibility"
              Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement"
             Value="Both">
                    <Setter TargetName="TopTick"
              Property="Visibility"
              Value="Visible" />
                    <Setter TargetName="BottomTick"
              Property="Visibility"
              Value="Visible" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--Template when the orientation of the Slider is Vertical.-->
        <ControlTemplate x:Key="VerticalSlider"
                 TargetType="{x:Type Slider}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto"
                        MinWidth="{TemplateBinding MinWidth}" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick"
             SnapsToDevicePixels="True"
             Placement="Left"
             Width="4"
             Visibility="Collapsed">
                    <TickBar.Fill>
                        <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                    </TickBar.Fill>
                </TickBar>

                <Border x:Name="TrackBackground"
            Margin="0"
            CornerRadius="2"
            Width="50"
            Grid.Column="1"
            BorderThickness="1">
                    <Border.BorderBrush>
                        <LinearGradientBrush StartPoint="0,0"
                             EndPoint="1,0">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="{DynamicResource BorderLightColor}"
                            Offset="0.0" />
                                    <GradientStop Color="{DynamicResource BorderDarkColor}"
                            Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>

                    </Border.BorderBrush>
                    <Border.Background>
                        <LinearGradientBrush EndPoint="1,0"
                             StartPoint="0.25,0">
                            <GradientStop Color="{DynamicResource ControlLightColor}"
                        Offset="0" />
                            <GradientStop Color="{DynamicResource SliderTrackDarkColor}"
                        Offset="1" />
                        </LinearGradientBrush>
                    </Border.Background>
                </Border>
                <Track Grid.Column="1"
           x:Name="PART_Track">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}"
                      Command="Slider.DecreaseLarge" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource SliderThumbStyleVertical}" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}"
                      Command="Slider.IncreaseLarge" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <TickBar x:Name="BottomTick"
             SnapsToDevicePixels="True"
             Grid.Column="2"
             Fill="{TemplateBinding Foreground}"
             Placement="Right"
             Width="4"
             Visibility="Collapsed" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="TickPlacement"
             Value="TopLeft">
                    <Setter TargetName="TopTick"
              Property="Visibility"
              Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement"
             Value="BottomRight">
                    <Setter TargetName="BottomTick"
              Property="Visibility"
              Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement"
             Value="Both">
                    <Setter TargetName="TopTick"
              Property="Visibility"
              Value="Visible" />
                    <Setter TargetName="BottomTick"
              Property="Visibility"
              Value="Visible" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style TargetType="{x:Type Slider}">
            <Setter Property="SnapsToDevicePixels"
          Value="true" />
            <Setter Property="OverridesDefaultStyle"
          Value="true" />
            <Style.Triggers>
                <Trigger Property="Orientation"
             Value="Horizontal">
                    <Setter Property="MinWidth"
              Value="104" />
                    <Setter Property="MinHeight"
              Value="21" />
                    <Setter Property="Template"
              Value="{StaticResource HorizontalSlider}" />
                </Trigger>
                <Trigger Property="Orientation"
             Value="Vertical">
                    <Setter Property="MinWidth"
              Value="21" />
                    <Setter Property="MinHeight"
              Value="104" />
                    <Setter Property="Template"
              Value="{StaticResource VerticalSlider}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- FocusVisual -->

        <Style x:Key="ButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="2"
                     StrokeThickness="1"
                     Stroke="#60000000"
                     StrokeDashArray="1 2" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Button -->
        <Style TargetType="Button">
            <Setter Property="SnapsToDevicePixels"
          Value="true" />
            <Setter Property="OverridesDefaultStyle"
          Value="true" />
            <Setter Property="FocusVisualStyle"
          Value="{StaticResource ButtonFocusVisual}" />
            <Setter Property="MinHeight"
          Value="23" />
            <Setter Property="MinWidth"
          Value="75" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border TextBlock.Foreground="{TemplateBinding Foreground}"
                x:Name="Border"
                CornerRadius="2"
                BorderThickness="1">
                            <Border.BorderBrush>
                                <LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{DynamicResource BorderLightColor}"
                                Offset="0.0" />
                                            <GradientStop Color="{DynamicResource BorderDarkColor}"
                                Offset="1.0" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>

                            </Border.BorderBrush>
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
                                    <GradientStop Color="{DynamicResource ControlLightColor}"
                            Offset="0" />
                                    <GradientStop Color="{DynamicResource ControlMediumColor}"
                            Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.5" />
                                        <VisualTransition GeneratedDuration="0"
                                  To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlMouseOverColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlPressedColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource PressedBorderDarkColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource PressedBorderLightColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledControlDarkColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames
                      Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledBorderDarkColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefault"
                   Value="true">

                                <Setter TargetName="Border"
                    Property="BorderBrush">
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="0,0"
                                     EndPoint="0,1">
                                            <GradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Color="{DynamicResource DefaultBorderBrushLightBrush}"
                                    Offset="0.0" />
                                                    <GradientStop Color="{DynamicResource DefaultBorderBrushDarkColor}"
                                    Offset="1.0" />
                                                </GradientStopCollection>
                                            </GradientBrush.GradientStops>
                                        </LinearGradientBrush>

                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="9*"/>
        </Grid.ColumnDefinitions>

        <TabControl Grid.Column="1">
            <TabItem Header="Basic controlls">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="0.7*"/>
                        <RowDefinition Height="4*"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="0.7*"/>
                        <RowDefinition Height="1.5*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.6*"/>
                        <ColumnDefinition Width="4*"/>
                        <ColumnDefinition Width="2*"/>
                        <ColumnDefinition Width="0.6*"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="1" Orientation="Horizontal">

                    </StackPanel>
                    <!--<StackPanel Grid.Column="2" Orientation="Horizontal">
                        <StackPanel>
                            <Button x:Name="browserRightButton" Content="Start Right:" Height="40" Click="browserRightButton_Click" />
                            <Button x:Name="browserRightStopButton" Content="StopRight" Height="40" Click="browserRightStopButton_Click"/>
                        </StackPanel>
                        <TextBox x:Name="browserRightAddress" Text="http://192.168.1.139:81/stream" Height="30" Padding="4" Margin="10" Width="500"/>
                    </StackPanel>-->
                    <Border BorderBrush="Black" BorderThickness="2" Grid.Column="1" Grid.Row="0" Grid.RowSpan="3" Margin="1,40,1,10" Padding="5">
                        <Image x:Name="leftCameraImage" />
                    </Border>
                    <!--<Image x:Name="rightCameraImage" Grid.Column="2" Grid.Row="1" Grid.RowSpan="2"/>-->
                    <Grid Grid.Column="2" Grid.Row="1" Grid.RowSpan="2" Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="50"/>
                        </Grid.RowDefinitions>
                        <Label>Camera gimbal contorls:</Label>
                        <TabControl Grid.RowSpan="2">
                            <TabItem Header="Gimbal control">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition Height="40"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <TabControl Grid.ColumnSpan="2">
                                        <TabItem Header="Sliders">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="100"/>
                                                    <ColumnDefinition Width="50"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="40"/>
                                                    <RowDefinition Height="40"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Label Grid.Row="0" Margin="5">Vertical angle:</Label>
                                                <TextBox x:Name="gimbalVerAngBox" Margin="5" Grid.Column="1" Text="{Binding ElementName=gimbalVerAngSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Padding="5"  Grid.Row="0"/>
                                                <Slider x:Name="gimbalVerAngSlider" Grid.Column="2" Orientation="Horizontal" Minimum="-100" Maximum="100" TickFrequency="1" IsSnapToTickEnabled="True" Grid.Row="0" Thumb.DragCompleted="gimbalSlider_ValueChanged" Margin="0,5"/>
                                                <Label Grid.Row="1" Margin="5">Horizontal angle:</Label>
                                                <TextBox x:Name="gimbalHorAngBox" Margin="5" Grid.Column="1" Text="{Binding ElementName=gimbalHorAngSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Padding="5" Grid.Row="1"/>
                                                <Slider x:Name="gimbalHorAngSlider" Grid.Column="2" Orientation="Horizontal" Minimum="-100" Maximum="100" TickFrequency="1" IsSnapToTickEnabled="True" Grid.Row="1" Thumb.DragCompleted="gimbalSlider_ValueChanged" Margin="0,5"/>
                                            </Grid>
                                        </TabItem>
                                        <TabItem Header="Graphical" IsSelected="true">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="100"/>
                                                    <ColumnDefinition Width="100"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="40"/>
                                                    <RowDefinition Height="40"/>
                                                    <RowDefinition Height="40"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Canvas x:Name="CameraTargetCanvas" Background="LightGray" Grid.Column="0" Grid.Row="3" Grid.ColumnSpan="3" Grid.RowSpan="4" Margin="5">
                                                    <Ellipse x:Name="CameraTarget" Fill="red" Stroke="Black" Width="50" Height="50"
                                                     MouseLeftButtonDown="CameraTarget_MouseLeftButtonDown" 
                                                     MouseLeftButtonUp="CameraTarget_MouseLeftButtonUp"
                                                     Loaded="CameraTarget_Loaded"/>
                                                </Canvas>
                                                <Label Grid.Row="0" Margin="5">Horizontal angle:</Label>
                                                <Label Grid.Row="1" Margin="5">Vertical angle:</Label>
                                                <TextBox Grid.Row="0" Grid.Column="1" Margin="5" x:Name="gimbalHorAngCanvasBox" Text="0" IsEnabled="False"/>
                                                <TextBox Grid.Row="1" Grid.Column="1" Margin="5" x:Name="gimbalVerAngCanvasBox" Text="0" IsEnabled="False"/>
                                                <Button x:Name="resetCameraCanvas" Content="Reset" Grid.Row="2" Click="resetCameraCanvas_Click"/>
                                                <CheckBox x:Name="cameraCanvasContinuous" Content="Continuous?" IsChecked="False" 
                                                  Grid.Row="2" Grid.Column="1" Margin="5,12"
                                                  Checked="cameraCanvasContinuous_Checked" Unchecked="cameraCanvasContinuous_Unchecked"/>
                                            </Grid>
                                        </TabItem>
                                        <TabItem Header="Predefined">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="100"/>
                                                    <ColumnDefinition Width="100"/>
                                                    <ColumnDefinition Width="200"/>
                                                    <ColumnDefinition Width="100"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="40"/>
                                                    <RowDefinition Height="40"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Label Margin="5" Grid.Column="0">Horizontal</Label>
                                                <Label Margin="5" Grid.Column="1">Vertical</Label>
                                                <Label Margin="5" Grid.Column="2">Name</Label>
                                                <TextBox x:Name="gimbalDefineXBox" Grid.Row="1" Grid.Column="0" Margin="5" Text="0"/>
                                                <TextBox x:Name="gimbalDefineYBox" Grid.Row="1" Grid.Column="1" Margin="5" Text="0"/>
                                                <TextBox x:Name="gimbalDefineNameBox" Grid.Row="1" Grid.Column="2" Margin="5"/>
                                                <Button x:Name="gimbalDefineAddButton" Grid.Row="1" Content="Add" Grid.Column="3" Click="gimbalDefineAddButton_Click"/>
                                                <DataGrid x:Name="predefinedDataGrid" Grid.Row="2" Grid.ColumnSpan="5" ItemsSource="{Binding PredefinedPositionsList}" 
                                              AutoGenerateColumns="False" SelectionChanged="predefinedDataGrid_SelectionChanged">
                                                    <DataGrid.Columns>
                                                        <DataGridTextColumn Binding="{Binding Path=X}" Header="Horizontal angle" Width="100"/>
                                                        <DataGridTextColumn Binding="{Binding Path=Y}" Header="Vertical angle" Width="100"/>
                                                        <DataGridTextColumn Binding="{Binding Path=Name}" Header="Name" Width="*"/>
                                                    </DataGrid.Columns>
                                                </DataGrid>
                                            </Grid>
                                        </TabItem>
                                    </TabControl>
                                    <Button x:Name="gimbalStabilizeStartBtn" Content="Start stabilizng camera" Click="gimbalStabilizeStartBtn_Click" Grid.Row="1"/>
                                    <Button x:Name="gimbalStabilizeStopBtn" Content="Stop stabilizing camera" Click="gimbalStabilizeStopBtn_Click" Grid.Row="1" Grid.Column="1"/>
                                </Grid>
                            </TabItem>
                            <TabItem Header="Camera settings">
                                <StackPanel>
                                    <StackPanel Orientation="Horizontal" Margin="10,10,0,10">
                                        <Button x:Name="browserLeftButton" Content="Start camera" Height="30" Width="100" Click="browserLeftButton_Click"/>
                                        <Button x:Name="browserLeftStopButton" Content="Stop camera" Height="30" Width="100" Click="browserLeftStopButton_Click" Margin="20,0"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <Label Width="100" Margin="12">Camera address:</Label>
                                        <TextBox x:Name="browserLeftAddress" Text="http://192.168.1.156" Height="30" Padding="4" Margin="10" Width="250"/>
                                    </StackPanel>
                                    <Separator Margin="10"/>
                                    <StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <Label Width="100" Margin="2">Resolution:</Label>
                                            <Slider x:Name="resolutionSlider" Maximum="13" Minimum="0" TickFrequency="1" Value="13" 
                                        ValueChanged="resolutionSlider_ValueChanged" Width="250" IsSnapToTickEnabled="True"/>
                                            <TextBox Text="{Binding ElementName=resolutionSlider, Path=Value}" Margin="20,2" Padding="2" Width="40" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />
                                        </StackPanel>
                                    </StackPanel>

                                    <Separator Margin="10"/>
                                    <StackPanel Orientation="Horizontal">
                                        <Label Width="100" Margin="2">Quality:</Label>
                                        <Slider x:Name="qualitySlider" Maximum="63" Minimum="1" TickFrequency="1" Value="25" 
                                        ValueChanged="qualitySlider_ValueChanged" Width="250" IsSnapToTickEnabled="True"/>
                                        <TextBox Text="{Binding ElementName=qualitySlider, Path=Value}" Margin="20,2" Padding="2" Width="40" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />
                                    </StackPanel>

                                    <Separator Margin="10"/>
                                    <StackPanel Orientation="Horizontal">
                                        <Label Width="100" Margin="2">Contrast:</Label>
                                        <Slider x:Name="contrastSlider" Maximum="2" Minimum="-2" TickFrequency="1" Value="0" 
                                        ValueChanged="contrastSlider_ValueChanged" Width="250" IsSnapToTickEnabled="True"/>
                                        <TextBox Text="{Binding ElementName=contrastSlider, Path=Value}" Margin="20,2" Padding="2" Width="40" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />
                                    </StackPanel>

                                    <Separator Margin="10"/>
                                    <StackPanel Orientation="Horizontal">
                                        <Label Width="100" Margin="2">Brightnes:</Label>
                                        <Slider x:Name="brightnesSlider" Maximum="2" Minimum="-2" TickFrequency="1" Value="0" 
                                        ValueChanged="brightnesSlider_ValueChanged" Width="250" IsSnapToTickEnabled="True"/>
                                        <TextBox Text="{Binding ElementName=brightnesSlider, Path=Value}" Margin="20,2" Padding="2" Width="40" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />
                                    </StackPanel>

                                    <Separator Margin="10"/>
                                    <StackPanel Orientation="Horizontal">
                                        <Label Width="100" Margin="2">Saturation:</Label>
                                        <Slider x:Name="saturationSlider" Maximum="2" Minimum="-2" TickFrequency="1" Value="0" 
                                        ValueChanged="saturationSlider_ValueChanged" Width="250" IsSnapToTickEnabled="True"/>
                                        <TextBox Text="{Binding ElementName=saturationSlider, Path=Value}" Margin="20,2" Padding="2" Width="40" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />
                                    </StackPanel>

                                    <Separator Margin="10"/>
                                    <StackPanel Orientation="Horizontal">
                                        <Label Width="100" Margin="2">WB mode:</Label>
                                        <ListBox x:Name="wbListBox" Width="100" SelectionChanged="wbListBox_SelectionChanged" SelectedIndex="0">
                                            <ListBoxItem>Auto</ListBoxItem>
                                            <ListBoxItem>Sunny</ListBoxItem>
                                            <ListBoxItem>Cloudy</ListBoxItem>
                                            <ListBoxItem>Office</ListBoxItem>
                                            <ListBoxItem>Home</ListBoxItem>
                                        </ListBox>
                                    </StackPanel>
                                </StackPanel>
                            </TabItem>
                        </TabControl>
                    </Grid>
                    <Slider x:Name="speedSlider" 
                        Grid.Row="1" Grid.Column="3" 
                        Grid.RowSpan="4"
                        Orientation="Vertical"
                        Maximum="100" 
                        Minimum="-100" 
                        Value="0" 
                        TickFrequency="5" 
                        IsSnapToTickEnabled="True" 
                        ValueChanged="speedSlider_ValueChanged" 
                        Thumb.DragCompleted="speedSlider_DragCompleted" HorizontalAlignment="Center" Margin="10,0"/>
                    <TextBox Grid.Row="0" Grid.Column="0" Text="{Binding ElementName=turnSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="36" Margin="10"/>
                    <Slider x:Name="turnSlider" Grid.Row="1" 
                        Grid.Column="0" 
                        Maximum="100" 
                        Minimum="-100" 
                        Grid.RowSpan="4"
                        Orientation="Vertical"
                        IsDirectionReversed="False"
                        Value="0" 
                        TickFrequency="10" 
                        IsSnapToTickEnabled="True"
                        ValueChanged="turnSlider_ValueChanged" 
                        Thumb.DragCompleted="turnSlider_DragCompleted" 
                        HorizontalAlignment="Center" Margin="10,0,10,0"/>
                    <TextBox Grid.Row="0" Grid.Column="3" Text="{Binding ElementName=speedSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="36" Margin="10"/>
                    <Grid Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Button x:Name="gear1btn" Grid.Column="0" Content="gear 1" Click="gear1btn_Click"/>
                        <Button x:Name="gear2btn" Grid.Column="1" Content="gear 2" Click="gear2btn_Click"/>
                        <Button x:Name="proxReset" Grid.Column="2" Content="Reset" Click="proxReset_Click"/>
                    </Grid>
                    <Button x:Name="stopEmergencyBtn" Grid.Column="1" Grid.Row="4" Content="STOP" Click="stopEmergencyBtn_Click" Margin="0,21,0,14" Grid.ColumnSpan="2"/>
                    <StackPanel Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" >

                        <!--<Slider IsEnabled="False" 
                        x:Name="angleSlider" 
                        Maximum="90" 
                        Minimum="-90" 
                        Value="0" 
                        VerticalAlignment="Center" 
                        TickFrequency="1" 
                        IsSnapToTickEnabled="True" 
                        Thumb.DragCompleted="angleSlider_DragCompleted"/>-->
                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem Header="Commands">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="6*"/>
                        <RowDefinition Height="30"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="4*"/>
                        <ColumnDefinition Width="4*"/>
                        <ColumnDefinition x:Name="QueueColumn" Width="*"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0" Margin="10">
                        <StackPanel Orientation="Horizontal" Height="25" VerticalAlignment="Top">
                            <Label Width="150">Serial port over USB:</Label>
                            <TextBox x:Name="PortBox" Text="COM3" Width="100" Height="25" VerticalAlignment="Top" Padding="3"/>
                            <Button x:Name="ConnectButton" Content="Connect" Click="ConnectButton_Click"/>
                            <Label Width="70">Baud rate:</Label>

                            <RadioButton x:Name="usbComRadio" Content="USB cable" IsChecked="True" Margin="5" GroupName="com"/>
                            <RadioButton x:Name="hc12ComRadio" Content="Radio" Margin="5" GroupName="com"/>
                        </StackPanel>
                        <Separator Margin="10"/>
                        <StackPanel Orientation="Horizontal" Height="25" VerticalAlignment="Top">
                            <Label Width="150">Mock:</Label>
                            <Button x:Name="mockConnectButton" Content="Connect" Click="MockConnectButton_Click"/>
                        </StackPanel>
                        <Separator Margin="10"/>
                        <StackPanel Orientation="Horizontal" Height="25" VerticalAlignment="top">
                            <Button x:Name="handshakeButton" Content="Handshake" Width="100" Click="handshakeButton_Click" HorizontalAlignment="Left"/>
                            <Button x:Name="DisconnectButton" Content="Disconnect" Click="DisconnectButton_Click" IsEnabled="False" Width="100" HorizontalAlignment="Left"/>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Grid.Row="0" Grid.Column="1" Margin="10">
                        <Button x:Name="queueStart" Content="Start Queue" Click="queueStart_Click" Height="30"/>
                        <Button x:Name="queueStop" Content="Stop Queue" Click="queueStop_Click" Height="30"/>
                        <Button x:Name="listQueue" Content="Enumerate Queue" Click="listQueue_Click" Height="30"/>
                        <Button x:Name="clearQueue" Content="Clear Queue" Click="clearQueue_Click" Height="30"/>
                    </StackPanel>
                    <StackPanel Grid.Row="1" Grid.Column="0" Margin="10">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="100"/>
                                <ColumnDefinition Width="100"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Button x:Name="setSpeedButton" Grid.Column="0" Content="Set speed:" Click="setSpeedButton_Click"/>
                            <TextBox x:Name="setSpeedBox" Grid.Column="1" Text="{Binding ElementName=setSpeedSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Padding="5"/>
                            <Slider x:Name="setSpeedSlider" Grid.Column="2" Orientation="Horizontal" Minimum="-100" Maximum="100" TickFrequency="10" IsSnapToTickEnabled="True"/>
                        </Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="100"/>
                                <ColumnDefinition Width="100"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Button x:Name="setTurnButton" Grid.Column="0" Content="Set turn:" Click="setTurnButton_Click"/>
                            <TextBox x:Name="setTurnBox" Grid.Column="1" Text="{Binding ElementName=setTurnSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Padding="5"/>
                            <Slider x:Name="setTurnSlider" Grid.Column="2" Orientation="Horizontal" Minimum="-100" Maximum="100" TickFrequency="10" IsSnapToTickEnabled="True"/>
                        </Grid>
                        <Separator Margin="0,10" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="100"/>
                                <ColumnDefinition Width="100"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                            </Grid.RowDefinitions>
                            <Button x:Name="moveForwardByButton" Grid.Column="0" Content="Move forward by:" Click="moveForwardByButton_Click"/>
                            <TextBox x:Name="moveForwardByDistBox" Grid.Column="1" Text="{Binding ElementName=moveForwardByDistSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Padding="5" Width="100" Grid.Row="0"/>
                            <Slider x:Name="moveForwardByDistSlider" Grid.Column="2" Orientation="Horizontal" Minimum="-10" Maximum="10" TickFrequency="0.1" IsSnapToTickEnabled="True" Grid.Row="0"/>
                            <Label Grid.Row="1">At speed:</Label>
                            <TextBox x:Name="moveForwardBySpeedBox" Grid.Column="1" Text="{Binding ElementName=moveForwardBySpeedSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Padding="5" Width="100" Grid.Row="1"/>
                            <Slider x:Name="moveForwardBySpeedSlider" Grid.Column="2" Orientation="Horizontal" Minimum="0" Maximum="100" TickFrequency="10" IsSnapToTickEnabled="True" Grid.Row="1" Value="20"/>
                            <Label Grid.Row="2">Gear:</Label>
                            <CheckBox x:Name="moveForwardBySendGearCheckbox" Grid.Row="2" Grid.Column="1" Content="Send?" Margin="0,7"/>
                            <StackPanel Orientation="Horizontal" Grid.Row="2" Grid.Column="2" Margin="0,7">
                                <RadioButton x:Name="firstGearRadio" Content="First gear" IsChecked="True" GroupName="gear"/>
                                <RadioButton x:Name="secondGearRadio" Content="Second gear" Margin="20,0,0,0" GroupName="gear"/>
                                <CheckBox x:Name="shouldStopAfterCheckBox" Content="Should stop after?" IsChecked="True" Margin="50,0,0,0"/>
                                <CheckBox x:Name="moveForwardSoftBox" Content="Soft?" IsChecked="True" Margin="50,0,0,0"/>
                            </StackPanel>
                        </Grid>
                        <Separator Margin="0,10" />
                        <StackPanel Orientation="Horizontal">
                            <Label Height="30">Stabilize direction:</Label>
                            <RadioButton x:Name="stabilizeOff" Content="Off" GroupName="stabilize" Margin="20,7" Checked="stabilizeOff_Checked"/>
                            <RadioButton x:Name="stabilizeOn" Content="On" Margin="0,7" GroupName="stabilize" Checked="stabilizeOn_Checked"/>
                        </StackPanel>
                        <Separator Margin="0,10" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="100"/>
                                <ColumnDefinition Width="100"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                            </Grid.RowDefinitions>
                            <Button x:Name="turnByButton" Grid.Column="0" Content="Turn by:" Click="turnByButton_Click"/>
                            <TextBox x:Name="turnByAngleBox" Grid.Column="1" Text="{Binding ElementName=turnByAngleSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Padding="5" Width="100" Grid.Row="0"/>
                            <Slider x:Name="turnByAngleSlider" Grid.Column="2" Orientation="Horizontal" Minimum="-360" Maximum="360" TickFrequency="1" IsSnapToTickEnabled="True" Grid.Row="0"/>
                            <Label Grid.Row="1">At speed:</Label>
                            <TextBox x:Name="turnBySpeedBox" Grid.Column="1" Text="{Binding ElementName=turnBySpeedSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Padding="5" Width="100" Grid.Row="1"/>
                            <Slider x:Name="turnBySpeedSlider" Grid.Column="2" Orientation="Horizontal" Minimum="0" Maximum="50" TickFrequency="10" IsSnapToTickEnabled="True" Grid.Row="1"/>
                            <Label Grid.Row="2">Gear:</Label>
                            <CheckBox x:Name="turnBySendGearCheckbox" Grid.Row="2" Grid.Column="1" Content="Send?" Margin="0,7"/>
                            <StackPanel Orientation="Horizontal" Grid.Row="2" Grid.Column="2" Margin="0,7">
                                <RadioButton x:Name="firstGearTurnRadio" Content="First gear" IsChecked="True" GroupName="turnGear"/>
                                <RadioButton x:Name="secondGearTurnRadio" Content="Second gear" Margin="20,0,0,0" GroupName="turnGear"/>
                            </StackPanel>
                        </Grid>
                        <Separator Margin="10"/>

                    </StackPanel>
                    <Grid Grid.Row="1" Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="3*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <StackPanel Grid.Row="0" Margin="10">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="100"/>
                                    <ColumnDefinition Width="100"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="waitButton" Grid.Column="0" Content="Wait:" Click="waitButton_Click"/>
                                <TextBox x:Name="waitBox" Grid.Column="1" Text="{Binding ElementName=waitSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Padding="5"/>
                                <Slider x:Name="waitSlider" Grid.Column="2" Orientation="Horizontal" Minimum="0" Maximum="60" TickFrequency="1" IsSnapToTickEnabled="True"/>
                            </Grid>
                            <Separator Margin="0,10"/>
                            <StackPanel Orientation="Horizontal">
                                <Button x:Name="stopASAPButton" Content="Stop ASAP" Click="stopEmergencyBtn_Click" Height="30" Width="100"/>
                                <Button x:Name="stopNormalButton" Content="Stop" Click="stopNormalButton_Click" Height="30" Width="100"/>
                                <Button x:Name="softStopButton" Content="Soft stop" Click="softStopButton_Click" Height="30" Width="100"/>
                            </StackPanel>
                            <Separator Margin="0,10"/>
                            <StackPanel Orientation="Horizontal">
                                <Label Height="30">Proximity sensor Behavior:</Label>
                                <RadioButton x:Name="proximityNone" Content="None" GroupName="proximity" Margin="20,7" Checked="proximity_Checked"/>
                                <RadioButton x:Name="proximityStop" Content="Hard stop" Margin="20,7" GroupName="proximity" Checked="proximity_Checked"/>
                                <RadioButton x:Name="proximitySoftStop" Content="Soft stop" Margin="20,7" GroupName="proximity" Checked="proximity_Checked"/>
                                <RadioButton x:Name="proximityStopAndReturn" Content="Stop and reverse" Margin="20,7" GroupName="proximity" Checked="proximity_Checked"/>
                            </StackPanel>
                            <Separator Margin="0,10"/>
                            <StackPanel>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="150"/>
                                        <ColumnDefinition Width="100"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Label Margin="5" Content="Wide front light:"/>
                                    <TextBox x:Name="wideLightBox" Margin="5" Grid.Column="1" Text="{Binding ElementName=wideLightSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Padding="5"/>
                                    <Slider x:Name="wideLightSlider" Grid.Column="2" Orientation="Horizontal" Minimum="0" Maximum="100" TickFrequency="5" IsSnapToTickEnabled="True" Thumb.DragCompleted="wideLightSlider_DragCompleted" Margin="0,5"/>
                                </Grid>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="150"/>
                                        <ColumnDefinition Width="100"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Label Margin="5" Content="Narrow front light:"/>
                                    <TextBox x:Name="narrowLightBox" Margin="5" Grid.Column="1" Text="{Binding ElementName=narrowLightSlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Padding="5"/>
                                    <Slider x:Name="narrowLightSlider" Grid.Column="2" Orientation="Horizontal" Minimum="0" Maximum="100" TickFrequency="5" IsSnapToTickEnabled="True" Thumb.DragCompleted="narrowLightSlider_DragCompleted" Margin="0,5"/>
                                </Grid>
                            </StackPanel>
                            <Separator Margin="0,10"/>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="Fans:" Margin="5,0"/>
                                <CheckBox x:Name="motorsFanCheckBox" Content="Motors" Margin="10,6" IsChecked="False" Click="motorsFanCheckBox_Click"/>
                                <CheckBox x:Name="ledsFanCheckBox" Content="LEDs"  Margin="10,6" IsChecked="False" Click="ledsFanCheckBox_Click"/>
                                <CheckBox x:Name="inasFanCheckBox" Content="INAs"  Margin="10,6" IsChecked="False" Click="inasFanCheckBox_Click"/>
                            </StackPanel>
                            <Separator Margin="0,10"/>
                        </StackPanel>
                        <StackPanel Grid.Row="1">
                            <Button x:Name="tempPresBtn" Content="Read temperature and preasure" Click="tempPresBtn_Click" Height="30"/>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="calibrateBtn" Content="Calibrate position sensor" Click="calibrateBtn_Click" Height="30" Grid.Column="0"/>
                                <Button x:Name="checkCalibrationBtn" Content="Check calibration" Click="checkCalibrationBtn_Click" Height="30" Grid.Column="1"/>
                                <Button x:Name="positionButton" Content="Read position" Click="positionButton_Click" Height="30" Grid.Column="2"/>
                            </Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="diagnozeBtn" Content="Diagnostics data" Height="30" Click="diagnozeBtn_Click"/>
                                <Button x:Name="electricButton" Content="Get electric data" Grid.Column="1" Click="electricButton_Click"/>
                            </Grid>
                        </StackPanel>
                    </Grid>
                    <StackPanel Grid.Column="2" Grid.RowSpan="3" Margin="5">
                        <Button x:Name="startAddingButton" Content="Start adding" Click="startAddingButton_Click"/>
                        <Separator Margin="5"/>
                        <Button x:Name="stopAddingButton" Content="Stop adding" Click="stopAddingButton_Click" IsEnabled="false"/>
                        <Separator Margin="5"/>
                        <Button x:Name="sendQueuedButton" Content="Send" Click="sendQueuedButton_Click"/>
                        <Separator Margin="5"/>
                        <Button x:Name="clearQueuedButton" Content="Clear" Click="clearQueuedButton_Click"/>
                    </StackPanel>
                    <ListBox x:Name="queueList" Grid.Column="2" Grid.Row="1" Grid.RowSpan="2" Margin="5"/>
                    <Button x:Name="queueListHideButton" Content=">>" Grid.Column="1" Grid.Row="2" Width="30" HorizontalAlignment="right" Click="queueListHideButton_Click"/>
                </Grid>
            </TabItem>
            <TabItem Header="Parameters">

            </TabItem>
        </TabControl>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="30"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Button x:Name="sendQueueClearBtn" Grid.Row="0" Content="Clear queue" Click="sendQueueClearBtn_Click"/>
            <ScrollViewer x:Name="ScrollView" Grid.Row="1" ScrollChanged="ScrollViewer_ScrollChanged">
                <TextBlock x:Name="outputBox" />
            </ScrollViewer>
        </Grid>
    </Grid>
</Window>
